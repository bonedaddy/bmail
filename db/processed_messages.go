// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package db

import (
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// ProcessedMessage is an object representing the database table.
type ProcessedMessage struct {
	ID        int64  `db:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	MessageID string `db:"message_id" boil:"message_id" json:"message_id" toml:"message_id" yaml:"message_id"`
	Processed string `db:"processed" boil:"processed" json:"processed" toml:"processed" yaml:"processed"`

	R *processedMessageR `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L processedMessageL  `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProcessedMessageColumns = struct {
	ID        string
	MessageID string
	Processed string
}{
	ID:        "id",
	MessageID: "message_id",
	Processed: "processed",
}

// Generated where

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var ProcessedMessageWhere = struct {
	ID        whereHelperint64
	MessageID whereHelperstring
	Processed whereHelperstring
}{
	ID:        whereHelperint64{field: `id`},
	MessageID: whereHelperstring{field: `message_id`},
	Processed: whereHelperstring{field: `processed`},
}

// ProcessedMessageRels is where relationship names are stored.
var ProcessedMessageRels = struct {
}{}

// processedMessageR is where relationships are stored.
type processedMessageR struct {
}

// NewStruct creates a new relationship struct
func (*processedMessageR) NewStruct() *processedMessageR {
	return &processedMessageR{}
}

// processedMessageL is where Load methods for each relationship are stored.
type processedMessageL struct{}

var (
	processedMessageColumns               = []string{"id", "message_id", "processed"}
	processedMessageColumnsWithoutDefault = []string{"message_id"}
	processedMessageColumnsWithDefault    = []string{"id", "processed"}
	processedMessagePrimaryKeyColumns     = []string{"id"}
)

type (
	// ProcessedMessageSlice is an alias for a slice of pointers to ProcessedMessage.
	// This should generally be used opposed to []ProcessedMessage.
	ProcessedMessageSlice []*ProcessedMessage
	// ProcessedMessageHook is the signature for custom ProcessedMessage hook methods
	ProcessedMessageHook func(boil.Executor, *ProcessedMessage) error

	processedMessageQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	processedMessageType                 = reflect.TypeOf(&ProcessedMessage{})
	processedMessageMapping              = queries.MakeStructMapping(processedMessageType)
	processedMessagePrimaryKeyMapping, _ = queries.BindMapping(processedMessageType, processedMessageMapping, processedMessagePrimaryKeyColumns)
	processedMessageInsertCacheMut       sync.RWMutex
	processedMessageInsertCache          = make(map[string]insertCache)
	processedMessageUpdateCacheMut       sync.RWMutex
	processedMessageUpdateCache          = make(map[string]updateCache)
	processedMessageUpsertCacheMut       sync.RWMutex
	processedMessageUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var processedMessageBeforeInsertHooks []ProcessedMessageHook
var processedMessageBeforeUpdateHooks []ProcessedMessageHook
var processedMessageBeforeDeleteHooks []ProcessedMessageHook
var processedMessageBeforeUpsertHooks []ProcessedMessageHook

var processedMessageAfterInsertHooks []ProcessedMessageHook
var processedMessageAfterSelectHooks []ProcessedMessageHook
var processedMessageAfterUpdateHooks []ProcessedMessageHook
var processedMessageAfterDeleteHooks []ProcessedMessageHook
var processedMessageAfterUpsertHooks []ProcessedMessageHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ProcessedMessage) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range processedMessageBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ProcessedMessage) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range processedMessageBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ProcessedMessage) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range processedMessageBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ProcessedMessage) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range processedMessageBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ProcessedMessage) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range processedMessageAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ProcessedMessage) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range processedMessageAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ProcessedMessage) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range processedMessageAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ProcessedMessage) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range processedMessageAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ProcessedMessage) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range processedMessageAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProcessedMessageHook registers your hook function for all future operations.
func AddProcessedMessageHook(hookPoint boil.HookPoint, processedMessageHook ProcessedMessageHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		processedMessageBeforeInsertHooks = append(processedMessageBeforeInsertHooks, processedMessageHook)
	case boil.BeforeUpdateHook:
		processedMessageBeforeUpdateHooks = append(processedMessageBeforeUpdateHooks, processedMessageHook)
	case boil.BeforeDeleteHook:
		processedMessageBeforeDeleteHooks = append(processedMessageBeforeDeleteHooks, processedMessageHook)
	case boil.BeforeUpsertHook:
		processedMessageBeforeUpsertHooks = append(processedMessageBeforeUpsertHooks, processedMessageHook)
	case boil.AfterInsertHook:
		processedMessageAfterInsertHooks = append(processedMessageAfterInsertHooks, processedMessageHook)
	case boil.AfterSelectHook:
		processedMessageAfterSelectHooks = append(processedMessageAfterSelectHooks, processedMessageHook)
	case boil.AfterUpdateHook:
		processedMessageAfterUpdateHooks = append(processedMessageAfterUpdateHooks, processedMessageHook)
	case boil.AfterDeleteHook:
		processedMessageAfterDeleteHooks = append(processedMessageAfterDeleteHooks, processedMessageHook)
	case boil.AfterUpsertHook:
		processedMessageAfterUpsertHooks = append(processedMessageAfterUpsertHooks, processedMessageHook)
	}
}

// One returns a single processedMessage record from the query.
func (q processedMessageQuery) One(exec boil.Executor) (*ProcessedMessage, error) {
	o := &ProcessedMessage{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: failed to execute a one query for processed_messages")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ProcessedMessage records from the query.
func (q processedMessageQuery) All(exec boil.Executor) (ProcessedMessageSlice, error) {
	var o []*ProcessedMessage

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "db: failed to assign all query results to ProcessedMessage slice")
	}

	if len(processedMessageAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ProcessedMessage records in the query.
func (q processedMessageQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to count processed_messages rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q processedMessageQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "db: failed to check if processed_messages exists")
	}

	return count > 0, nil
}

// ProcessedMessages retrieves all the records using an executor.
func ProcessedMessages(mods ...qm.QueryMod) processedMessageQuery {
	mods = append(mods, qm.From("\"processed_messages\""))
	return processedMessageQuery{NewQuery(mods...)}
}

// FindProcessedMessage retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProcessedMessage(exec boil.Executor, iD int64, selectCols ...string) (*ProcessedMessage, error) {
	processedMessageObj := &ProcessedMessage{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"processed_messages\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, processedMessageObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: unable to select from processed_messages")
	}

	return processedMessageObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ProcessedMessage) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("db: no processed_messages provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(processedMessageColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	processedMessageInsertCacheMut.RLock()
	cache, cached := processedMessageInsertCache[key]
	processedMessageInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			processedMessageColumns,
			processedMessageColumnsWithDefault,
			processedMessageColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(processedMessageType, processedMessageMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(processedMessageType, processedMessageMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"processed_messages\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"processed_messages\" () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT \"%s\" FROM \"processed_messages\" WHERE %s", strings.Join(returnColumns, "\",\""), strmangle.WhereClause("\"", "\"", 0, processedMessagePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "db: unable to insert into processed_messages")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == processedMessageMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "db: unable to populate default values for processed_messages")
	}

CacheNoHooks:
	if !cached {
		processedMessageInsertCacheMut.Lock()
		processedMessageInsertCache[key] = cache
		processedMessageInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the ProcessedMessage.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ProcessedMessage) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	processedMessageUpdateCacheMut.RLock()
	cache, cached := processedMessageUpdateCache[key]
	processedMessageUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			processedMessageColumns,
			processedMessagePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("db: unable to update processed_messages, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"processed_messages\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, processedMessagePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(processedMessageType, processedMessageMapping, append(wl, processedMessagePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update processed_messages row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by update for processed_messages")
	}

	if !cached {
		processedMessageUpdateCacheMut.Lock()
		processedMessageUpdateCache[key] = cache
		processedMessageUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q processedMessageQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all for processed_messages")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected for processed_messages")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProcessedMessageSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("db: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), processedMessagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"processed_messages\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, processedMessagePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all in processedMessage slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected all in update all processedMessage")
	}
	return rowsAff, nil
}

// Delete deletes a single ProcessedMessage record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ProcessedMessage) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("db: no ProcessedMessage provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), processedMessagePrimaryKeyMapping)
	sql := "DELETE FROM \"processed_messages\" WHERE \"id\"=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete from processed_messages")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by delete for processed_messages")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q processedMessageQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("db: no processedMessageQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from processed_messages")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for processed_messages")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProcessedMessageSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("db: no ProcessedMessage slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(processedMessageBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), processedMessagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"processed_messages\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, processedMessagePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from processedMessage slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for processed_messages")
	}

	if len(processedMessageAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ProcessedMessage) Reload(exec boil.Executor) error {
	ret, err := FindProcessedMessage(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProcessedMessageSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProcessedMessageSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), processedMessagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"processed_messages\".* FROM \"processed_messages\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, processedMessagePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "db: unable to reload all in ProcessedMessageSlice")
	}

	*o = slice

	return nil
}

// ProcessedMessageExists checks if the ProcessedMessage row exists.
func ProcessedMessageExists(exec boil.Executor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"processed_messages\" where \"id\"=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "db: unable to check if processed_messages exists")
	}

	return exists, nil
}
